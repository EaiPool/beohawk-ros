/* Auto-generated by genmsg_cpp for file /home/art/Workspace/ROS/uscrs_repository/art_common/msg/KinectMsg.msg */
#ifndef ART_COMMON_MESSAGE_KINECTMSG_H
#define ART_COMMON_MESSAGE_KINECTMSG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace art_common
{
template <class ContainerAllocator>
struct KinectMsg_ : public ros::Message
{
  typedef KinectMsg_<ContainerAllocator> Type;

  KinectMsg_()
  : id(0)
  , stamp()
  , image()
  , depth()
  {
  }

  KinectMsg_(const ContainerAllocator& _alloc)
  : id(0)
  , stamp()
  , image(_alloc)
  , depth(_alloc)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _image_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  image;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _depth_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  depth;


  ROS_DEPRECATED uint32_t get_image_size() const { return (uint32_t)image.size(); }
  ROS_DEPRECATED void set_image_size(uint32_t size) { image.resize((size_t)size); }
  ROS_DEPRECATED void get_image_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->image; }
  ROS_DEPRECATED void set_image_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->image = vec; }
  ROS_DEPRECATED uint32_t get_depth_size() const { return (uint32_t)depth.size(); }
  ROS_DEPRECATED void set_depth_size(uint32_t size) { depth.resize((size_t)size); }
  ROS_DEPRECATED void get_depth_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->depth; }
  ROS_DEPRECATED void set_depth_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->depth = vec; }
private:
  static const char* __s_getDataType_() { return "art_common/KinectMsg"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d420e29357504ed8cd2a34b69f1665ed"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 id\n\
time stamp\n\
char[] image\n\
char[] depth\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, id);
    ros::serialization::serialize(stream, stamp);
    ros::serialization::serialize(stream, image);
    ros::serialization::serialize(stream, depth);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, id);
    ros::serialization::deserialize(stream, stamp);
    ros::serialization::deserialize(stream, image);
    ros::serialization::deserialize(stream, depth);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(id);
    size += ros::serialization::serializationLength(stamp);
    size += ros::serialization::serializationLength(image);
    size += ros::serialization::serializationLength(depth);
    return size;
  }

  typedef boost::shared_ptr< ::art_common::KinectMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_common::KinectMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct KinectMsg
typedef  ::art_common::KinectMsg_<std::allocator<void> > KinectMsg;

typedef boost::shared_ptr< ::art_common::KinectMsg> KinectMsgPtr;
typedef boost::shared_ptr< ::art_common::KinectMsg const> KinectMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_common::KinectMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_common::KinectMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::art_common::KinectMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d420e29357504ed8cd2a34b69f1665ed";
  }

  static const char* value(const  ::art_common::KinectMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd420e29357504ed8ULL;
  static const uint64_t static_value2 = 0xcd2a34b69f1665edULL;
};

template<class ContainerAllocator>
struct DataType< ::art_common::KinectMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_common/KinectMsg";
  }

  static const char* value(const  ::art_common::KinectMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_common::KinectMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 id\n\
time stamp\n\
char[] image\n\
char[] depth\n\
\n\
";
  }

  static const char* value(const  ::art_common::KinectMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_common::KinectMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.stamp);
    stream.next(m.image);
    stream.next(m.depth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KinectMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_common::KinectMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_common::KinectMsg_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "image[]" << std::endl;
    for (size_t i = 0; i < v.image.size(); ++i)
    {
      s << indent << "  image[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.image[i]);
    }
    s << indent << "depth[]" << std::endl;
    for (size_t i = 0; i < v.depth.size(); ++i)
    {
      s << indent << "  depth[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.depth[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_COMMON_MESSAGE_KINECTMSG_H

