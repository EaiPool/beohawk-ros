"""autogenerated by genmsg_py from KinectMsg.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime

class KinectMsg(roslib.message.Message):
  _md5sum = "d420e29357504ed8cd2a34b69f1665ed"
  _type = "art_common/KinectMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id
time stamp
char[] image
char[] depth

"""
  __slots__ = ['id','stamp','image','depth']
  _slot_types = ['int32','time','char[]','char[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       id,stamp,image,depth
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(KinectMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      if self.image is None:
        self.image = []
      if self.depth is None:
        self.depth = []
    else:
      self.id = 0
      self.stamp = roslib.rostime.Time()
      self.image = []
      self.depth = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_i2I.pack(_x.id, _x.stamp.secs, _x.stamp.nsecs))
      length = len(self.image)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.image))
      length = len(self.depth)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.depth))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.id, _x.stamp.secs, _x.stamp.nsecs,) = _struct_i2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.image = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.depth = struct.unpack(pattern, str[start:end])
      self.stamp.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_i2I.pack(_x.id, _x.stamp.secs, _x.stamp.nsecs))
      length = len(self.image)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.image.tostring())
      length = len(self.depth)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.depth.tostring())
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.id, _x.stamp.secs, _x.stamp.nsecs,) = _struct_i2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.image = numpy.frombuffer(str[start:end], dtype=numpy.uint8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.depth = numpy.frombuffer(str[start:end], dtype=numpy.uint8, count=length)
      self.stamp.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i2I = struct.Struct("<i2I")
