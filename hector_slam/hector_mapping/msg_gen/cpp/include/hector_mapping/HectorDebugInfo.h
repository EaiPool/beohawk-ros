/* Auto-generated by genmsg_cpp for file /home/tallevy/ros-workspace/hector_slam/hector_mapping/msg/HectorDebugInfo.msg */
#ifndef HECTOR_MAPPING_MESSAGE_HECTORDEBUGINFO_H
#define HECTOR_MAPPING_MESSAGE_HECTORDEBUGINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "hector_mapping/HectorIterData.h"

namespace hector_mapping
{
template <class ContainerAllocator>
struct HectorDebugInfo_ {
  typedef HectorDebugInfo_<ContainerAllocator> Type;

  HectorDebugInfo_()
  : iterData()
  {
  }

  HectorDebugInfo_(const ContainerAllocator& _alloc)
  : iterData(_alloc)
  {
  }

  typedef std::vector< ::hector_mapping::HectorIterData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hector_mapping::HectorIterData_<ContainerAllocator> >::other >  _iterData_type;
  std::vector< ::hector_mapping::HectorIterData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hector_mapping::HectorIterData_<ContainerAllocator> >::other >  iterData;


  ROS_DEPRECATED uint32_t get_iterData_size() const { return (uint32_t)iterData.size(); }
  ROS_DEPRECATED void set_iterData_size(uint32_t size) { iterData.resize((size_t)size); }
  ROS_DEPRECATED void get_iterData_vec(std::vector< ::hector_mapping::HectorIterData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hector_mapping::HectorIterData_<ContainerAllocator> >::other > & vec) const { vec = this->iterData; }
  ROS_DEPRECATED void set_iterData_vec(const std::vector< ::hector_mapping::HectorIterData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hector_mapping::HectorIterData_<ContainerAllocator> >::other > & vec) { this->iterData = vec; }
private:
  static const char* __s_getDataType_() { return "hector_mapping/HectorDebugInfo"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4d33c0696c0c536f5c1447c260756674"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "HectorIterData[] iterData\n\
================================================================================\n\
MSG: hector_mapping/HectorIterData\n\
float64[9] hessian\n\
float64 conditionNum\n\
float64 determinant\n\
float64 conditionNum2d\n\
float64 determinant2d\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, iterData);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, iterData);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(iterData);
    return size;
  }

  typedef boost::shared_ptr< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_mapping::HectorDebugInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HectorDebugInfo
typedef  ::hector_mapping::HectorDebugInfo_<std::allocator<void> > HectorDebugInfo;

typedef boost::shared_ptr< ::hector_mapping::HectorDebugInfo> HectorDebugInfoPtr;
typedef boost::shared_ptr< ::hector_mapping::HectorDebugInfo const> HectorDebugInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hector_mapping::HectorDebugInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hector_mapping

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hector_mapping::HectorDebugInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d33c0696c0c536f5c1447c260756674";
  }

  static const char* value(const  ::hector_mapping::HectorDebugInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4d33c0696c0c536fULL;
  static const uint64_t static_value2 = 0x5c1447c260756674ULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hector_mapping/HectorDebugInfo";
  }

  static const char* value(const  ::hector_mapping::HectorDebugInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "HectorIterData[] iterData\n\
================================================================================\n\
MSG: hector_mapping/HectorIterData\n\
float64[9] hessian\n\
float64 conditionNum\n\
float64 determinant\n\
float64 conditionNum2d\n\
float64 determinant2d\n\
\n\
";
  }

  static const char* value(const  ::hector_mapping::HectorDebugInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.iterData);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HectorDebugInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hector_mapping::HectorDebugInfo_<ContainerAllocator> & v) 
  {
    s << indent << "iterData[]" << std::endl;
    for (size_t i = 0; i < v.iterData.size(); ++i)
    {
      s << indent << "  iterData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hector_mapping::HectorIterData_<ContainerAllocator> >::stream(s, indent + "    ", v.iterData[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HECTOR_MAPPING_MESSAGE_HECTORDEBUGINFO_H

